let
    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    Source = Excel.CurrentWorkbook(){[Name="TableData"]}[Content],

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° Column BN ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    AddColumnBJ = Table.AddColumn(Source, "Onboard", each
    let
            RequesterName = [#"Requester Name"],
            Subject = [Subject],
            TicketCancelled = [#"Ticket Cancelled"]
        in
            if RequesterName = "ESS-HRIS-NoReply@sec.or.th" and TicketCancelled <> "TRUE" then
                if Text.Contains(Subject, "Mail Action: ‡πÅ‡∏à‡πâ‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏á‡∏≤‡∏ô") then
                    "‡πÅ‡∏à‡πâ‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏á‡∏≤‡∏ô Ticket ‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ó‡∏≥ Canceled ‡∏î‡πâ‡∏ß‡∏¢"
                else if Text.Contains(Subject, "‡πÅ‡∏à‡πâ‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà") then
                    "‡πÅ‡∏à‡πâ‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà Ticket ‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ó‡∏≥ Canceled ‡∏î‡πâ‡∏ß‡∏¢"
                else
                    null
            else
                null
    ),
    
    // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    FilteredRows = Table.SelectRows(AddColumnBJ, each not (
        (
            ([Category] = "‡∏£‡∏∞‡∏ö‡∏ö‡∏á‡∏≤‡∏ô Online" and [Group] <> "Client Support")
            or
            ([Category] = "‡∏≠‡∏∑‡πà‡∏ô‡πÜ" and [Group] <> "Client Support")
        )
    )),

    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    ChangeType = Table.TransformColumnTypes(FilteredRows,{
        {"Created Time", type datetime}, 
        {"Resolved Time", type datetime}
    }),

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î"
    AddSameDayCheck = Table.AddColumn(ChangeType, "ChkCloStatus", each 
        if [Resolved Time] = null then 
           let
            DaysPassed = Duration.Days(DateTime.LocalNow() - [Created Time])
        in
            if DaysPassed > 1 then
                "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î (" & Number.ToText(DaysPassed) & " ‡∏ß‡∏±‡∏ô)"
            else
                "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î"
        else
            let
                CreateDate = Date.From([Created Time]),
                ResolveDate = Date.From([Resolved Time]),
                CreateTimeOnly = Time.From([Created Time]),
                ResolveTimeOnly = Time.From([Resolved Time]),
                StartWork = #time(8,0,0),
                EndWork = #time(18,0,0),
                IsSameDay = CreateDate = ResolveDate,
                IsCreateInWorkingHours = CreateTimeOnly >= StartWork and CreateTimeOnly <= EndWork,
                IsResolveInWorkingHours = ResolveTimeOnly <= EndWork
            in
                if IsSameDay and IsCreateInWorkingHours and IsResolveInWorkingHours then 
                    "‡∏õ‡∏¥‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"
                else 
                    "Pending ‡∏Ç‡πâ‡∏≤‡∏°‡∏ß‡∏±‡∏ô"
    ),

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Working Hours (‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö HH:mm)
    AddWorkingHours = Table.AddColumn(AddSameDayCheck, "Working Hours", each 
        if [Resolved Time] = null then 
            null
        else
            let
                CreateDate = Date.From([Created Time]),
                ResolveDate = Date.From([Resolved Time]),
                CreateTimeOnly = Time.From([Created Time]),
                ResolveTimeOnly = Time.From([Resolved Time]),
                StartWork = #time(8,0,0),
                EndWork = #time(18,0,0),

                // ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                AdjCreateTime = 
                    if CreateTimeOnly < StartWork then StartWork
                    else if CreateTimeOnly > EndWork then EndWork
                    else CreateTimeOnly,

                AdjResolveTime = 
                    if ResolveTimeOnly < StartWork then StartWork
                    else if ResolveTimeOnly > EndWork then EndWork
                    else ResolveTimeOnly,

                // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                RawHours = 
                    if CreateDate = ResolveDate then
                        Duration.TotalHours(AdjResolveTime - AdjCreateTime)
                    else
                        let
                            DaysDiff = Duration.Days(ResolveDate - CreateDate),
                            FirstDay = Duration.TotalHours(EndWork - AdjCreateTime),
                            MiddleDays = if DaysDiff > 1 then (DaysDiff - 1) * 10 else 0,
                            LastDay = Duration.TotalHours(AdjResolveTime - StartWork)
                        in
                            FirstDay + MiddleDays + LastDay,

                // ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:mm
                TotalMinutes = Number.Round(RawHours * 60, 0),
                HoursPart = Number.IntegerDivide(TotalMinutes, 60),
                MinutesPart = Number.Mod(TotalMinutes, 60),

                // ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:mm
                TextResult = Text.PadStart(Text.From(HoursPart), 2, "0") & ":" & Text.PadStart(Text.From(MinutesPart), 2, "0")
            in
                TextResult
    ),

    // ‚úÖ üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "Cause of Issue(7)" ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    AddCauseOfIssue7 = Table.AddColumn(AddWorkingHours, "CauOfIssue(7)", each
        let
            CauseOfIssue = [#"Cause of Issue"],  // Column G
            TicketCancelled = [#"Ticket Cancelled"]  // Column AX
        in
            if CauseOfIssue = "" and TicketCancelled <> "TRUE" then
                "Cause of Issue(7)"
            else
                null
    ),

    // ‚úÖ üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "Cause of Outstanding(8)" ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    AddCauseOfOutstanding8 = Table.AddColumn(AddCauseOfIssue7, "CauOfOutstanding(8)", each
        let
            CauseOfOutstanding = [#"Cause of Outstanding"],  // Column H
            TicketCancelled = [#"Ticket Cancelled"],  // Column AX
            StatusClose = [#"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î"]  // Column BH
        in
            if CauseOfOutstanding = "" and TicketCancelled <> "TRUE" then
                if StatusClose = "Pending ‡∏Ç‡πâ‡∏≤‡∏°‡∏ß‡∏±‡∏ô" then
                    "CauseOutstanding(8)=Pending ‡∏Ç‡πâ‡∏≤‡∏°‡∏ß‡∏±‡∏ô(8.1)"
                else if Text.StartsWith(StatusClose, "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î") then
                    "Cause of Outstanding=‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î(8.2)"
                else
                    null
            else
                null
    ),

    // ‚úÖ üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "FRStatus(22)" ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    AddFRStatus22 = Table.AddColumn(AddCauseOfOutstanding8, "FRStatus(22)", each
        let
            FirstResponseStatus = [#"First Response Status"],  // Column V
            TicketCancelled = [#"Ticket Cancelled"],  // Column AX
            CreatedTime = [#"Created Time"],  // Column V (Created Time)
            CreatedTimeOnly = Time.From(CreatedTime),
            BreakTimeStart = #time(11, 59, 0),
            BreakTimeEnd = #time(12, 59, 59)
        in
            if TicketCancelled <> "TRUE" then
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏ô
                if (FirstResponseStatus = "" or FirstResponseStatus = "SLA Violated") 
                   and CreatedTimeOnly >= BreakTimeStart 
                   and CreatedTimeOnly <= BreakTimeEnd then
                    "‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å(22)"
                // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å ‡πÅ‡∏ï‡πà First Response Status ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
                else if FirstResponseStatus = "" then
                    "First Response Status ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á"
                else
                    null
            else
                null
    ),

    // ‚úÖ üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "OperCat(30)" ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    AddOperCat30 = Table.AddColumn(AddFRStatus22, "OperCat(30)", each
        let
            Category = [Category],  // Column F
            CauseOfIssue = [#"Cause of Issue"],        // Column G
            OperationCategory = [#"Operation Category"],  // Column AD
            OperationSubCategory = [#"Operation Sub-Category"],  // Column AE
            CauseOfIssueText = Text.Trim(if CauseOfIssue = null then "" else Text.From(CauseOfIssue))
        in
            if Category <> "‡∏£‡∏∞‡∏ö‡∏ö‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô" and OperationCategory = "User Operation" and OperationSubCategory = "User Request (Application)" then
            "User Request (Application)‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô(30)"
        else if Category="Hardware" and OperationCategory = "System Operation" then
            "Hardware ‡πÄ‡∏™‡∏µ‡∏¢ Operation Category ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Hardware Operation"
        else if List.Contains({"‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á","‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå","‡∏¢‡∏∑‡∏°","‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á","‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á","‡∏ï‡∏¥‡∏î"}, CauseOfIssueText) and OperationCategory <> "Client Operation" then
            "‡πÄ‡∏Ñ‡∏™‡∏ô‡∏µ‡πâ Operation Category ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô Client Operation"
        else      
                null
    ),

    // ‚úÖ üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "ChkGropu(24)" ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    AddChkGroup24 = Table.AddColumn(AddOperCat30, "ChkGroup(24)", each 
        let 
            Category = [Category], // column F
            Gropu = [Group], // Column X
            SubCategory = [#"Sub-Category"]   // Column AV ‡πÉ‡∏™‡πà # ‡∏´‡∏≤‡∏Å column ‡∏°‡∏µ ‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©
        in 
            if Category = "‡∏£‡∏∞‡∏ö‡∏ö‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô" and [Group] = "Application Support" then 
            "Application Support ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏Ñ‡∏™‡∏£‡∏∞‡∏ö‡∏ö‡∏á‡∏≤‡∏ô Online ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"
            else if SubCategory = "IDM" and [Group] <> "Security Team" then
            "IDM ‡πÄ‡∏õ‡πá‡∏ô‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Security Team"
            else 
                null
    ),
// ‚úÖ üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "ChkResolType(42)" ‡πÄ‡∏Ñ‡∏™‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà Resolution Type ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
AddChkResolType42 = Table.AddColumn(AddChkGroup24, "ChkResolType(42)", each
    let
        ResolutionType = [#"Resolution Type"],     // Column AP
        Status = [Status]                          // Column AU
    in
        if List.Contains({"Resolve","Close"}, Status) and (ResolutionType = null or Text.Trim(Text.From(ResolutionType)) = "") then
            "‡πÄ‡∏Ñ‡∏™‡∏ô‡∏µ‡πâ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà Resolution Type ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á"
        else
            null
),

// ‚úÖ üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "ChkAgent(45)" Agent ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
AddChkAgent45 = Table.AddColumn(AddChkResolType42, "ChkAgent(45)", each
    let
        Agent = [Agent]                            // Column AS
    in
        if Agent = null or Text.Trim(Text.From(Agent)) = "" or Text.Trim(Text.From(Agent)) = "No Agent" then
            "‡πÄ‡∏Ñ‡∏™‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ Agent"
        else
            null
),

// ‚úÖ üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "ChkTKCancel(50)" Ticket Cancel ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
AddChkTKCancel50 = Table.AddColumn(AddChkAgent45, "ChkTKCancel(50)", each
    let
        TicketCancelled = [#"Ticket Cancelled"]     // Column AX
    in
        if TicketCancelled = null or Text.Trim(Text.From(TicketCancelled)) = "" then
            "‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô Ticket Canceled"
        else
            null
),

// ‚úÖ üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "ChkType(54)" ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Ticket Type
AddChkType54 = Table.AddColumn(AddChkTKCancel50, "ChkType(54)", each
    let
        Type = [Type],                              // Column BB
        OperationCategory = [#"Operation Category"], // Column AD
        OperationCategoryOld = [#"Operation Category Old"], // Column AD (Old)
        OpCatOldText = if OperationCategoryOld = null then "" else Text.From(OperationCategoryOld)
    in
        if Type = "Incident"
            and OperationCategory = "Client Operation"
            and Text.StartsWith(OpCatOldText, "IMAC")
        then "Ticket ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô Service Request ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡πà‡∏≤"
        else null
),

// ‚úÖ üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "Chk1Tier(9)" ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 1st Tier Agent ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô)
AddChk1Tier9 = Table.AddColumn(AddChkType54, "Chk1Tier(9)", each
    let
        TierAgent = [#"1st Tier Agent"],   // Column I
        Category = [Category]               // Column F
    in
        if Category = "‡∏£‡∏∞‡∏ö‡∏ö‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô" and (TierAgent = null or Text.Trim(Text.From(TierAgent)) = "") then
            "Ticket ‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ 1 Tier"
        else
            null
),
// function ‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ Agent (fullname) ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö fullname ‡πÉ‡∏ô mapping ‡πÑ‡∏´‡∏° (case-insensitive)
        AgentMatches = (shortName as text) =>
            Text.Upper(Agent) = Text.Upper(Record.FieldOrDefault(FullNameOf, shortName, "")),

        // function ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ TierAgent ‡πÄ‡∏õ‡πá‡∏ô shortname ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (case-sensitive as provided)
        TierIs = (short as text) => Text.Upper(TierAgent) = Text.Upper(short),

        // ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        result =
            if Category = "‡∏£‡∏∞‡∏ö‡∏ö‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô" then
                // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô ‡πÉ‡∏´‡πâ‡πÅ‡∏°‡∏õ‡∏à‡∏≤‡∏Å TierAgent ‡∏ñ‡πâ‡∏≤ TierAgent ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å
                // ‡∏ñ‡πâ‡∏≤ TierAgent ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πá‡∏û ‡πÅ‡∏ï‡πà Agent ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å ‡πÉ‡∏´‡πâ‡πÅ‡∏°‡∏õ‡∏à‡∏≤‡∏Å Agent
                // ‡∏°‡∏¥‡∏â‡∏∞‡∏ô‡∏±‡πâ‡∏ô ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Agent ‡πÄ‡∏î‡∏¥‡∏°
                if TierAgent <> "" and (
                    TierIs("Pipat") or TierIs("Chaiyaporn") or TierIs("Panod") or TierIs("Yutthakan") or TierIs("Piyasak") or TierIs("Pongtorn") or TierIs("Issara") or TierIs("Khosit") or TierIs("Suchada")
                ) then
                    // ‡∏ñ‡πâ‡∏≤ TierAgent ‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡πâ‡∏ô ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á TierAgent ‡πÄ‡∏™‡∏°‡∏≠
                    ToEmail(TierAgent)
                else if AgentMatches("pipat") then ToEmail("pipat")
                else if AgentMatches("chaiyaporn") then ToEmail("chaiyaporn")
                else if AgentMatches("panod") then ToEmail("panod")
                else if AgentMatches("yutthakan") then ToEmail("yutthakan")
                else if AgentMatches("piyasak") then ToEmail("piyasak")
                else if AgentMatches("pongtorn") then ToEmail("pongtorn")
                else if AgentMatches("issara") then ToEmail("issara")
                else if AgentMatches("khosit") then ToEmail("khosit")
                else if AgentMatches("suchada") then ToEmail("suchada")
                else Agent

            else
                // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô ‡πÉ‡∏´‡πâ‡πÅ‡∏°‡∏õ‡∏à‡∏≤‡∏Å Agent (‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°) ‡πÄ‡∏õ‡πá‡∏ô short->email
                if AgentMatches("pipat") then ToEmail("pipat")
                else if AgentMatches("chaiyaporn") then ToEmail("chaiyaporn")
                else if AgentMatches("panod") then ToEmail("panod")
                else if AgentMatches("yutthakan") then ToEmail("yutthakan")
                else if AgentMatches("piyasak") then ToEmail("piyasak")
                else if AgentMatches("pongtorn") then ToEmail("pongtorn")
                else if AgentMatches("issara") then ToEmail("issara")
                else if AgentMatches("khosit") then ToEmail("khosit")
                else if AgentMatches("suchada") then ToEmail("suchada")
                else Agent
    in
        result
)
in
    AddCreEmail

